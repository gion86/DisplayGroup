*********************************************************************************
*                             DISPLAYGROUP library                              *
*                     CONFIGURATION AND BUILD (Arduino UNO)                     *
*********************************************************************************


The library can be built using Eclipse or a standard Unix makefile:

*********************************************************************************
ECLIPSE
*********************************************************************************

One way to build this library is to install Eclipse and the AVR plugin. 
The instruction I followed for the configuration can be found at 
http://horrorcoding.altervista.org/arduino-development-with-eclipse-a-step-by-step-tutorial-to-the-basic-setup/
for Windows OS and at http://itpedia.nyu.edu/wiki/Arduino_in_Eclipse for Mac and Linux. 
These instructions are for Mac but they work pretty straightforward on Linux too.
On these links you can find some useful instructions and hints on Eclipse 
configuration and AVR-GCC options:

- http://andybrown.me.uk/wk/2010/10/17/setting-up-eclipse-for-avr-projects/
- http://andybrown.me.uk/wk/2010/10/24/your-first-avr-project-in-eclipse/

Once you have configured the Eclipse environment, you can import this project to 
your workspace, and it should be already configured. 


*********************************************************************************
MAKEFILE
*********************************************************************************

It is possible to use command line interface and make command, look in the 
Makefile folder.
You need make utilities and AVR-GCC toolchain installed. In Ubuntu and derivates 
this command should be enough:

sudo apt-get install make avrdude binutils-avr gcc-avr avr-libc gdb-avr

Look for instruction if you are using other Linux distribution or Windows. 
The makefile needs some path to find the correct includes and tools:

ARDUINO_DIR="path to the Arduino SDK toolkit"
LIB_DIR="path to the library folder (with .cpp files)"

MCU=atmega328p          #(CPU type, for AVR configuration)
CPU_SPEED=16000000UL    #(CPU frequency, for AVR configuration)

The makefile uses the same includes and compiler options used by Eclipse



*********************************************************************************
COMMON OPTIONS
*********************************************************************************

Here are the options I used to build and run the project on an Arduino UNO board, 
for BOTH ECLISPE AND MAKEFILE BUILD.

You have to include some file from the Arduino SDK: 

- arduino-x.x.x/hardware/arduino/cores/arduino
- arduino-x.x.x/hardware/arduino/variants/standard

and 

- /opt/arduino-X.X.X/hardware/tools/avr/avr-stl/include

which is a non standard include, in Arduino, to be able to compile with STL support. 
The C++ Standard Template Library has been converted by Andy Brown and is available at 
http://andybrown.me.uk/wk/2011/01/15/the-standard-template-library-stl-for-avr-with-c-streams/.
The project uses vectors, iterator and reverse iterator from the STL.

Some really useful setting for the AVR-GCC compiler are necessary to reduce the 
size of the final application, when you link more library together:

- http://andybrown.me.uk/wk/2010/10/24/recommended-avr-gcc-compiler-settings/

In fact you have only few KB of flash memory available on the Arduino AVR CPU 
(32KB for Arduino Uno), so size optimization matters.



*********************************************************************************
BUILD
*********************************************************************************

The building process is done completely by Eclipse IDE, and the generated makefile 
will also use Avrdude utility at the end of the building to send the binary file 
to Arduino, if it is connect to the computer.
The new makefile in the active build configuration (in your project path) should 
be created by Eclipse during configuration. So just build the project as you would 
do for any other C++ project.

 
If you used the makefile in the /Makefile folder, once the path are correct, type 
make in the command line. Type make clean to clean the build folder.
 